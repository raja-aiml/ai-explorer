# =====================================================================
# QUERY ROUTER CONFIGURATION FILE
# =====================================================================
# This configuration defines the tasks, techniques, and metadata fields
# used by the query router template.
# =====================================================================

# Reference to available routing logic definitions
# Points to a file containing predefined routes and handling strategies
route_definitions_reference: routes_definitions

# =====================================================================
# ANALYSIS TASKS
# =====================================================================
# The sequential analytical tasks the system performs to process queries
tasks:
  - title: Tree of Thought
    description: >
      Explore multiple plausible interpretations of the user's query.
      * Generate 3-5 different possible interpretations
      * Consider both explicit and implicit intentions
      * Evaluate technical and non-technical perspectives
      * Identify potential ambiguities or unclear aspects
      * Example: For "How do I fix memory leaks?", consider interpretations
        for different programming languages, different levels of expertise,
        and different contexts (development vs. production)

  - title: Chain of Thought Reasoning
    description: >
      Evaluate each interpretation through logical reasoning.
      * Analyze contextual clues and specific terminology
      * Identify the most likely intended meaning
      * Consider complexity level and implied expertise
      * Evaluate which interpretation addresses the core problem
      * Example: For multiple interpretations of "How do I fix memory leaks?",
        reason through which language context is most likely based on any
        technical terms used and the complexity of the question

  - title: Final Classification
    description: >
      Select the optimal prompting technique based on analysis.
      * Match query characteristics to the most appropriate technique
      * Consider query complexity, specificity, and required detail
      * Balance between efficiency and comprehensiveness
      * Example: For troubleshooting queries like "My app crashes with error X",
        Step-back technique might be best to first understand the context before
        jumping to solutions

  - title: Metadata Extraction
    description: >
      Extract relevant attributes and characteristics from the query.
      * Identify key terms that signal intent and domain
      * Assess tone, urgency, and complexity
      * Determine user expertise level and query context
      * Example: For "URGENT: Need help fixing production database crash!",
        extract high urgency, frustrated tone, and database domain

# =====================================================================
# PROMPTING TECHNIQUES
# =====================================================================
# Available strategies for structuring responses to queries
prompt_techniques:
  - Zero-shot          # Direct response without examples (simple queries)
                       # Example: "What's the capital of France?"
                       
  - Few-shot           # Using 1-3 examples to guide response (comparative queries)
                       # Example: "Compare REST vs GraphQL APIs"
                       
  - Multi-shot         # Using many examples covering variations (pattern learning)
                       # Example: "Write a function to parse different JSON formats"
                       
  - Step-back          # Reframe complex problems into simpler components
                       # Example: "My Docker container has error code 137"
                       
  - Self-consistent    # Generate multiple answers and find consensus
                       # Example: "Analyze this data and identify key trends"
                       
  - Chain-of-thought   # Show logical reasoning steps before final answer
                       # Example: "Why does my code produce this unexpected output?"
                       
  - Tree-of-thought    # Explore multiple reasoning paths to find best solution
                       # Example: "Design a CI/CD pipeline for my microservices"

# =====================================================================
# RESPONSE FORMATTING
# =====================================================================
# Specifies the order of sections in the structured response
response_order:
  - Tree of Thought
  - Chain of Thought Reasoning
  - Final Classification
  - Explanation
  - Metadata

# =====================================================================
# METADATA SCHEMA
# =====================================================================
# Fields to extract during query analysis

# 1. Intent and Content Metadata
metadata_fields:
  - name: intent_keywords
    type: list
    description: "Keywords or phrases that signal the user's intent."
    example: "['error', 'fix', 'not working']"

  - name: query_complexity
    type: enum
    description: "Assessed complexity level of the query."
    options: [basic, intermediate, advanced]
    example: "advanced"

  - name: task_type
    type: enum
    description: "General task classification."
    options: [information_retrieval, creative_generation, summarization, data_transformation, reasoning_analysis]
    example: "reasoning_analysis"

  - name: answer_format
    type: enum
    description: "Expected output format."
    options: [short_answer, list, structured_yaml, paragraph_essay]
    example: "structured_yaml"

  - name: prompt_technique
    type: enum
    description: "Selected prompting strategy."
    options: [Zero-shot, Few-shot, Multi-shot, Step-back, Self-consistent, Chain-of-thought, Tree-of-thought]
    example: "Chain-of-thought"

# 2. User Context Metadata
  - name: tone
    type: string
    description: "The user's tone (e.g., curious, confused, frustrated, demanding)."
    example: "frustrated"

  - name: urgency_level
    type: enum
    description: "Estimated urgency of the query."
    options: [low, medium, high]
    example: "high"

  - name: user_type
    type: enum
    description: "Inferred user type or profile."
    options: [developer, researcher, student, business_user, unknown, network_engineer]
    example: "developer"

# 3. Security and Session Metadata
  - name: malicious_flags
    type: list
    optional: true
    condition: "Only present if final_route is 'malicious_prompt'"
    description: "Indicators of harmful, manipulative, or unethical behavior."
    example: "['prompt_injection', 'jailbreak_attempt']"

  - name: timestamp
    type: string
    optional: true
    description: "The timestamp when the query was received."
    example: "2023-11-15T14:22:31Z"

  - name: session_id
    type: string
    optional: true
    description: "Unique identifier for the user session."
    example: "sess_12345abcde"

  - name: query_language
    type: string
    optional: true
    description: "The language in which the query is written."
    example: "en-US"
    